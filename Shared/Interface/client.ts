import { Reminder } from "./reminder";
import { DateFilter, NumberFilter } from "./filter";

export enum GENDER {
  Male = "Male",
  Female = "Female",
}

export enum VISA_STATUS {
  Unknown = "Unknown",
  PR = "Permanent Resident",
  Citizen = "Citizen",
  Student = "Student Visa",
  Working = "Working Visa",
  Visitor = "Visitor Visa",
  Family = "Family Partner Visa",
  Other = "Other Visa",
}

export enum KNOWN_BY {
  Friend = "Friend",
  SocialEvent = "Social Event",
  OpenHome = "Open Home",
  SocialMedia = "Social Media",
  Consulting = "Consulting",
  Other = "Other",
}

export enum SOCIAL_MEDIA {
  Wechat = "Wechat",
  Redbook = "Redbook",
  Tiktok = "Tiktok",
  // When you need to add more social method, search for the following line to add all places required
  //... Add more social method
}

export interface SocialMedia {
  name: SOCIAL_MEDIA;
  value: string;
}

// define relationship with other clients
// eg: my agents with levels or spouse with other users
// export interface Relationship {
//   type?: "AGENT" | string
//   value?: string
// }

export interface Client {
  PK: string;
  id: string;
  name: string;
  dob?: string;
  gender?: GENDER;
  email?: string;
  phone?: string;
  category?: string;
  knownBy?: KNOWN_BY;
  social?: SocialMedia[];
  visa?: VISA_STATUS;
  notes?: string;
  relationships?: Record<string, string>; // record of type and client id
  properties?: string[]; // Property ID
  createdBy?: string; // who created the client
  createdDate?: string;
  lastModifiedDate?: string; // auto-generated by backend
  reminder?: Reminder;
}

export interface ClientEvaluatedKey {
  PK: "Client";
  id: string;
  lastModifiedDate: string;
}

export interface ClientListParam {
  filter?: ClientFilter;
  lastEvaluatedKey?: ClientEvaluatedKey;
}

// This structure is used to save into db
// For better search
export interface DBClient extends Omit<Client, "social"> {
  wechat?: string;
  redbook?: string;
  tiktok?: string;
  //... Add more social method
}

export enum CLIENT_SEARCH_SCOPE {
  FAST = "fast",
  ALL = "all",
}

export interface ClientsPagedPayload {
  items: Client[];
  count: number;
  scannedCount: number;
  lastEvaluatedKey: ClientEvaluatedKey;
}

export interface ClientSearch {
  keyword: string;
  scope?: CLIENT_SEARCH_SCOPE;
}

export interface ClientFilter {
  // string filter (should compare exact match)
  category?: string;
  gender?: string;
  visa?: string;
  knownBy?: string;
  createdBy?: string;
  // string contains
  birthday?: string;
  // has valid?
  hasValid?: string[];

  // date filter (date range only, or exist)
  createdDate?: DateFilter;
  lastModifiedDate?: DateFilter;
}
